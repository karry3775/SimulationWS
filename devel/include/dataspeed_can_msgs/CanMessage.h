// Generated by gencpp from file dataspeed_can_msgs/CanMessage.msg
// DO NOT EDIT!


#ifndef DATASPEED_CAN_MSGS_MESSAGE_CANMESSAGE_H
#define DATASPEED_CAN_MSGS_MESSAGE_CANMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dataspeed_can_msgs
{
template <class ContainerAllocator>
struct CanMessage_
{
  typedef CanMessage_<ContainerAllocator> Type;

  CanMessage_()
    : data()
    , id(0)
    , extended(false)
    , dlc(0)  {
      data.assign(0);
  }
  CanMessage_(const ContainerAllocator& _alloc)
    : data()
    , id(0)
    , extended(false)
    , dlc(0)  {
  (void)_alloc;
      data.assign(0);
  }



   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;

   typedef uint32_t _id_type;
  _id_type id;

   typedef uint8_t _extended_type;
  _extended_type extended;

   typedef uint8_t _dlc_type;
  _dlc_type dlc;





  typedef boost::shared_ptr< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> const> ConstPtr;

}; // struct CanMessage_

typedef ::dataspeed_can_msgs::CanMessage_<std::allocator<void> > CanMessage;

typedef boost::shared_ptr< ::dataspeed_can_msgs::CanMessage > CanMessagePtr;
typedef boost::shared_ptr< ::dataspeed_can_msgs::CanMessage const> CanMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dataspeed_can_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'dataspeed_can_msgs': ['/home/kartik/Documents/gazebo_practice_ws/src/autonomous_vehicle/dataspeed_can/dataspeed_can_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2866d426ed29ed9fab7f393d3ece69b0";
  }

  static const char* value(const ::dataspeed_can_msgs::CanMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2866d426ed29ed9fULL;
  static const uint64_t static_value2 = 0xab7f393d3ece69b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dataspeed_can_msgs/CanMessage";
  }

  static const char* value(const ::dataspeed_can_msgs::CanMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[8] data\n"
"uint32 id\n"
"bool extended\n"
"uint8 dlc\n"
;
  }

  static const char* value(const ::dataspeed_can_msgs::CanMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.id);
      stream.next(m.extended);
      stream.next(m.dlc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dataspeed_can_msgs::CanMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dataspeed_can_msgs::CanMessage_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "extended: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extended);
    s << indent << "dlc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dlc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATASPEED_CAN_MSGS_MESSAGE_CANMESSAGE_H
